spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/netcrackers
    username: postgres
    password: 12345
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
  mustache:
    expose-request-attributes: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 471475403024-pua37dj6cj7qub8k6vo7d4e9lf0rod6c.apps.googleusercontent.com
            client-secret: YetnM5EzwEcJvcXma6Ki_SII
          github:
            client-id: f8e1a7b9caf3958ae30d
            client-secret: fc09ac8316d5fbfb3dc13d70eb42429a63013ee2
          facebook:
            client-id: 239256766770163
            client-secret: addd5303463e49f1e7620c3c8d74daed
#         vk:
#            client-id: 6725360
#            client-secret: LrfTzWytLty7fMhS4wun
#            authorization-grant-type: authorization_code
#            redirect-uri-template: '{baseUrl}/login/oauth2/code/{registrationId}'
#            client-name: VK
#            scope: photos
#            token-name: code
#            authentication-scheme: query
#            client-authentication-scheme: form
#            grant-type: authorization_code
#        provider:
#          vk:
#            authorization-uri: https://oauth.vk.com/authorize
#            token-uri: https://oauth.vk.com/access_token
#            user-info-uri: https://api.vk.com/method/users.get?v=5.87
server:
  ssl:
    key-store-type: PKCS12
    key-store: classpath:keystore.p12
    key-store-password: 123456
    key-alias: tomcat
    enabled: true
    enabled-protocols: [TLSv1.2]
  port: 8443